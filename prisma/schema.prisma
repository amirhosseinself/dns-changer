generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model DnsTag {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique  // مثل "Gaming" یا "Mobile"
  createdAt DateTime   @default(now())
  dnsRecords DnsTagOnDnsRecord[]
}

model DnsRecord {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  ip1       String
  ip2       String?
  type      DnsType
  createdAt DateTime  @default(now())
  tags      DnsTagOnDnsRecord[]
}

model DnsTagOnDnsRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dnsTagId    String   @db.ObjectId
  dnsRecordId String   @db.ObjectId

  dnsTag      DnsTag   @relation(fields: [dnsTagId], references: [id])
  dnsRecord   DnsRecord @relation(fields: [dnsRecordId], references: [id])

  @@unique([dnsTagId, dnsRecordId])
}

enum DnsType {
  GENERAL
  IPV6
  GOOGLE
  RADAR
  SHEKAN
  IRANCELL
  HAMRAHAVAL
  GAMING
  TELECOM
  OTHER
}

model V2RayConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String
  server  String
  port    Int
  uuid    String
  alterId Int
  dns     String
}


model UserDnsRecord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ip1       String
  ip2       String?
  type      DnsType  // GOOGLE, IPV6, MOBILE, etc.
  createdAt DateTime @default(now())

  UserDnsUsage UserDnsUsage? @relation("DnsToUserUsage")
}

model UserDnsUsage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userDnsId   String    @db.ObjectId @unique // شناسه DNS اختصاصی که کاربر استفاده کرده
  internetTag String    // مانند ایرانسل، همراه اول، مخابرات
  destination String    // جایی که DNS استفاده شده، مانند سرور بازی یا سرویس خاص
  userIds     String[]  // آرایه‌ای از userId ها که از این DNS استفاده کرده‌اند
  createdAt   DateTime  @default(now())

  userDns     UserDnsRecord @relation("DnsToUserUsage", fields: [userDnsId], references: [id])
}


// USER, ACCOUNT, SESSION, VERIFICATION TOKEN, OTP

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  email          String      @unique                // Email is required for login
  password       String                              // Hashed password
  userName       String?     @unique
  fullName       String?
  profilePic     String?
  bio            String?
  accounts       Account[]
  sessions       Session[]
  fcmTokens      FCMToken[]
  userReports    UserReport[]

  isGuest        Boolean     @default(true)         // Guests won't have email/password

  role           Role        @default(USER)          // Default role is USER

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum Role {
  ADMIN
  USER
  GUEST
}


model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  ipAddress         String?  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  
  @@unique([identifier, token])
}

// model Otp {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   phoneNumber String  @db.String  // ✅ این فیلد را اضافه کنید
//   user       User     @relation(fields: [userId], references: [id])
//   code       String
//   sentAt     DateTime
//   expiresAt  DateTime
//   isVerified Boolean  @default(false)

//   @@index([phoneNumber]) // برای بهبود سرعت جستجو
// }

model FCMToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  deviceId  String?  // ✅ اختیاری: شناسه دیوایس (Android ID / iOS identifier)
  token     String   @unique
  platform  String   // "android" | "ios" | "web"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  status    String   @default("open") // open | in_progress | closed
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  deviceId  String?
  logType   String   // crash | freeze | custom
  message   String
  metadata  Json?    // جزئیات اضافی
  createdAt DateTime @default(now())
}

model UserDnsConnection {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?   @db.ObjectId
  fcmToken        String?
  dnsLabel        String
  dnsIp1          String
  dnsIp2          String?
  timestamp       DateTime
  connectionState String    // connected | disconnected

  networkInfo     Json      // { connection_type, carrier_name, ip_address, mobile_network_type }
  
  createdAt       DateTime  @default(now())
}
